name: 🚀 Redeploy

on:
  workflow_dispatch:

jobs:

  verify_ec2:
    name: ✅ EC2 Verification
    environment: staging
    runs-on: ubuntu-latest

    steps:
      - name: "🧪 Test EC2 SSH Connection"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_REMOTE_HOST }}
          username: ${{ secrets.EC2_REMOTE_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          # passphrase: ${{ secrets.EC2_PASSPHRASE }}
          port: 22
          script_stop: true
          script: |
            RED='\033[0;31'
            BLUE='\033[34m'
            GREEN='\033[0;32m'
            NC='\033[0m' # No Color
            echo -e "$GREEN Connected to the EC2 Instance! $NC"

            echo -e "$BLUE Verifying Docker in intalled $NC"
            if [ -x "$(command -v docker)" ]; then
                echo -e "$GREEN ✅ Connected to the EC2 Instance! $NC"
                # command
            else
                echo "❌ Docker is not installed!"
                exit 1
            fi

            sudo yum install jq -y

            echo -e "$BLUE Verifying DockerHub Repositories exist $NC"
            UNAME="${{ secrets.DOCKERHUB_USERNAME }}"
            UPASS="${{ secrets.DOCKERHUB_PASSWORD }}"

            function docker_tag_exists() {
                TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "'${UNAME}'", "password": "'${UPASS}'"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
                curl --silent -f --head -lL https://hub.docker.com/v2/repositories/$1/tags/$2/ > /dev/null
            }

            # if docker_tag_exists ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_CLIENT_REPO }} latest; then
            #     echo "✅ Found Docker Image on DockerHub"
            # else
            #     (echo "❌ Unable to find ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_CLIENT_REPO }} on DockerHub?" && exit 1)
            # fi

            if docker_tag_exists ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_SERVER_REPO }} latest; then
                echo "✅ Found Docker Image on DockerHub"
            else
                (echo "❌ Unable to find ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_SERVER_REPO }} on DockerHub" && exit 1)
            fi

            exit 0

  deploy_ec2:
    needs: [verify_ec2]
    name: 🚀 EC2 Depoyment
    environment: production
    runs-on: ubuntu-latest

    steps:
      - name: "🐳 Deploy Docker Containers"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_REMOTE_HOST }}
          username: ${{ secrets.EC2_REMOTE_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          passphrase: ${{ secrets.EC2_PASSPHRASE }}
          port: 22
          script_stop: true
          script: |
            RED='\033[0;31'
            BLUE='\033[34m'
            GREEN='\033[0;32m'
            NC='\033[0m' # No Color
            echo -e "$BLUE Starting EC2 deployment script $NC"
            sudo service docker stop

            rm -f .env
            touch .env
            printf "NODE_ENV=${{ secrets.NODE_ENV }}
            SERVER_URL=${{ secrets.SERVER_URL }}
            PORT=${{ secrets.PORT }}
            MONGODB_URL=${{ secrets.MONGODB_URL }}
            SKIP_PREFLIGHT_CHECK=${{ secrets.SKIP_PREFLIGHT_CHECK }}
            REACT_APP_FIREBASE_API_KEY=${{ secrets.REACT_APP_FIREBASE_API_KEY }}
            REACT_APP_FIREBASE_AUTH_DOMAIN=${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN }}
            REACT_APP_FIREBASE_PROJECT_ID=${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }}
            REACT_APP_FIREBASE_STORAGE_BUCKET=${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET }}
            REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }}
            REACT_APP_FIREBASE_APP_ID=${{ secrets.REACT_APP_FIREBASE_APP_ID }}
            REACT_APP_FIREBASE_MEASUREMENT_ID=${{ secrets.REACT_APP_FIREBASE_MEASUREMENT_ID }}" >> .env

            NODE_ENV=${{ secrets.NODE_ENV }}
            SERVER_URL=${{ secrets.SERVER_URL }}
            PORT=${{ secrets.PORT }}
            MONGODB_URL=${{ secrets.MONGODB_URL }}
            SKIP_PREFLIGHT_CHECK=${{ secrets.SKIP_PREFLIGHT_CHECK }}
            REACT_APP_FIREBASE_API_KEY=${{ secrets.REACT_APP_FIREBASE_API_KEY }}
            REACT_APP_FIREBASE_AUTH_DOMAIN=${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN }}
            REACT_APP_FIREBASE_PROJECT_ID=${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }}
            REACT_APP_FIREBASE_STORAGE_BUCKET=${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET }}
            REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }}
            REACT_APP_FIREBASE_APP_ID=${{ secrets.REACT_APP_FIREBASE_APP_ID }}
            REACT_APP_FIREBASE_MEASUREMENT_ID=${{ secrets.REACT_APP_FIREBASE_MEASUREMENT_ID }}

            # ls -a
            echo -e "$GREEN Created the production .env file $NC"
            docker kill $(docker ps -q) || true
            docker system prune -a --volumes -f
            echo -e "$RED Removed existing Docker containers $NC"
            sudo service docker start
            echo -e "$BLUE Authenticating Docker $NC"
            docker login -u="${{ secrets.DOCKERHUB_USERNAME }}" -p="${{ secrets.DOCKERHUB_PASSWORD }}"
            docker run --add-host host.docker.internal:host-gateway --env-file ./.env -d -p 5000:5000 ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_SERVER_REPO }}:latest
            echo -e "$BLUE Started up latest Server image $NC"

            docker run --add-host host.docker.internal:host-gateway -id -p 3000:3000 --env NODE_ENV=$NODE_ENV \
            --env SERVER_URL=$SERVER_URL \
            --env PORT=$PORT \
            --env MONGODB_URL=$MONGODB_URL \
            --env SKIP_PREFLIGHT_CHECK=$SKIP_PREFLIGHT_CHECK \
            --env REACT_APP_FIREBASE_API_KEY=$REACT_APP_FIREBASE_API_KEY \
            --env REACT_APP_FIREBASE_AUTH_DOMAIN=$REACT_APP_FIREBASE_AUTH_DOMAIN \
            --env REACT_APP_FIREBASE_PROJECT_ID=$REACT_APP_FIREBASE_PROJECT_ID \
            --env REACT_APP_FIREBASE_STORAGE_BUCKET=$REACT_APP_FIREBASE_STORAGE_BUCKET \
            --env REACT_APP_FIREBASE_MESSAGING_SENDER_ID=$REACT_APP_FIREBASE_MESSAGING_SENDER_ID \
            --env REACT_APP_FIREBASE_APP_ID=$REACT_APP_FIREBASE_APP_ID \
            --env REACT_APP_FIREBASE_MEASUREMENT_ID=$REACT_APP_FIREBASE_MEASUREMENT_ID \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_CLIENT_REPO }}:latest


            echo -e "$BLUE Started up latest Server image $NC"
            sudo iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 3000
            sudo iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 5000 -j REDIRECT --to-port 5000
            echo -e "$GREEN EC2 deployment complete! $NC"