name: Docker CI

on:
  workflow_call:

jobs:

  build_docker_client:
    name: "üê≥ üèóÔ∏è Build Docker (CLIENT) Image"
    runs-on: ubuntu-latest
    env:
     working-directory: client

    steps:
      - name: "‚òÅÔ∏è Check out Git Repository"
        uses: actions/checkout@v2

      - name: "üîß Set up Node"
        uses: actions/setup-node@v3
        with:
          node-version: 14
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: "‚ö° Cache node modules"
        id: cache
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: "üì¶ Install dependencies"
        run: npm install --prefer-offline --no-audit --progress=false

      - name: "üîß Create .env file"
        run: |
          rm -f .env
          cp .env.sample .env
          export $(grep -v '^#' .env | xargs)

      - name: "‚ö° Cache Docker [client] layers"
        id: docker-cache
        uses: actions/cache@v2
        with:
          path: /tmp/docker-registry-${{ env.working-directory }}
          key: ${{ env.working-directory }}-${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            docker-registry-no-buildkit-${{ env.working-directory }}-${{ github.sha }}

      - name: "üß™ Run local Docker registry"
        run: docker run -d -p 5000:5000 --restart=always --name registry -v /tmp/docker-registry:/var/lib/registry registry:2 && npx wait-on tcp:5000

      - name: "üèó Build Docker image"
        working-directory: ${{ env.working-directory }}
        if: steps.docker-cache.outputs.cache-hit != 'true'
        run: |
          docker build . \
          -t ${{ env.working-directory }} \
          --cache-from=localhost:5000/${{ env.working-directory }} \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          --build-arg NODE_ENV=$NODE_ENV \
          --build-arg SERVER_URL=$SERVER_URL \
          --build-arg PORT=$PORT \
          --build-arg MONGODB_URL=$MONGODB_URL \
          --build-arg SKIP_PREFLIGHT_CHECK=$SKIP_PREFLIGHT_CHECK \
          --build-arg REACT_APP_FIREBASE_API_KEY=$REACT_APP_FIREBASE_API_KEY \
          --build-arg REACT_APP_FIREBASE_AUTH_DOMAIN=$REACT_APP_FIREBASE_AUTH_DOMAIN \
          --build-arg REACT_APP_FIREBASE_PROJECT_ID=$REACT_APP_FIREBASE_PROJECT_ID \
          --build-arg REACT_APP_FIREBASE_STORAGE_BUCKET=$REACT_APP_FIREBASE_STORAGE_BUCKET \
          --build-arg REACT_APP_FIREBASE_MESSAGING_SENDER_ID=$REACT_APP_FIREBASE_MESSAGING_SENDER_ID \
          --build-arg REACT_APP_FIREBASE_APP_ID=$REACT_APP_FIREBASE_APP_ID \
          --build-arg REACT_APP_FIREBASE_MEASUREMENT_ID=$REACT_APP_FIREBASE_MEASUREMENT_ID \

      - name: "üè∑Ô∏è Tag local Docker image build"
        if: steps.docker-cache.outputs.cache-hit != 'true'
        run: docker tag ${{ env.working-directory }} localhost:5000/${{ env.working-directory }} && docker push localhost:5000/${{ env.working-directory }} || true

  build_docker_server:
    name: "üê≥ üèóÔ∏è Build Docker (SERVER) Image"
    runs-on: ubuntu-latest
    env:
     working-directory: server

    steps:
      - name: "‚òÅÔ∏è Check out Git Repository"
        uses: actions/checkout@v2

      - name: "üîß Set up Node"
        uses: actions/setup-node@v3
        with:
          node-version: 14
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: "‚ö° Cache node modules"
        uses: actions/cache@v3
        id: cache
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: "üì¶ Install dependencies"
        run: npm install --prefer-offline --no-audit --progress=false

      - name: "üîß Create .env file"
        run: |
          rm -f .env
          cp .env.sample .env
          export $(grep -v '^#' .env | xargs)

      - name: "‚ö° Cache Docker [server] layers"
        id: docker-cache-a
        uses: actions/cache@v2
        with:
          path: /tmp/docker-registry-${{ env.working-directory }}
          key: ${{ env.working-directory }}-${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            docker-registry-no-buildkit-${{ env.working-directory }}-${{ github.sha }}

      - name: "üß™ Run local Docker registry"
        run: docker run -d -p 5000:5000 --restart=always --name registry -v /tmp/docker-registry:/var/lib/registry registry:2 && npx wait-on tcp:5000

      - name: "üèó Build Docker image"
        working-directory: ${{ env.working-directory }}
        if: steps.docker-cache.outputs.cache-hit != 'true'
        run: docker build . -t ${{ env.working-directory }} --cache-from=localhost:5000/${{ env.working-directory }} --build-arg BUILDKIT_INLINE_CACHE=1

      - name: "üè∑Ô∏è Tag Docker image"
        if: steps.docker-cache.outputs.cache-hit != 'true'
        run: docker tag ${{ env.working-directory }} localhost:5000/${{ env.working-directory }} && docker push localhost:5000/${{ env.working-directory }} || true
