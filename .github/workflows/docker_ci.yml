name: Docker CI

on:
  workflow_call:

jobs:

  build_docker_client:
    name: "🐳 🏗️ Build Docker (CLIENT) Image"
    runs-on: ubuntu-latest
    env:
     working-directory: client

    steps:
      - name: "☁️ Check out Git Repository"
        uses: actions/checkout@v2

      - name: "🔧 Set up Node"
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: "⚡ Cache dependencies"
        uses: actions/cache@v3
        id: modules-cache
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

      - name: "📦 Install dependencies"
        # if: steps.modules-cache.outputs.cache-hit != 'true'
        run: npm install

      - name: "🔧 Create .env file"
        run: |
          rm -f .env
          cp .env.sample .env
          export $(grep -v '^#' .env | xargs)

      - name: "⚡ Cache Docker [client] layers"
        id: docker-cache
        uses: actions/cache@v2
        with:
          path: /tmp/docker-registry-${{ env.working-directory }}
          key: ${{ env.working-directory }}-${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            docker-registry-no-buildkit-${{ env.working-directory }}-${{ github.sha }}

      - name: "🧪 Run local Docker registry"
        run: docker run -d -p 5000:5000 --restart=always --name registry -v /tmp/docker-registry:/var/lib/registry registry:2 && npx wait-on tcp:5000

      - name: "🏗 Build Docker image"
        working-directory: ${{ env.working-directory }}
        if: steps.docker-cache.outputs.cache-hit != 'true'
        run: |
          docker build . \
          -t ${{ env.working-directory }} \
          --cache-from=localhost:5000/${{ env.working-directory }} \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          --build-arg NODE_ENV=$NODE_ENV \
          --build-arg SERVER_URL=$SERVER_URL \
          --build-arg PORT=$PORT \
          --build-arg MONGODB_URL=$MONGODB_URL \
          --build-arg SKIP_PREFLIGHT_CHECK=$SKIP_PREFLIGHT_CHECK \
          --build-arg REACT_APP_FIREBASE_API_KEY=$REACT_APP_FIREBASE_API_KEY \
          --build-arg REACT_APP_FIREBASE_AUTH_DOMAIN=$REACT_APP_FIREBASE_AUTH_DOMAIN \
          --build-arg REACT_APP_FIREBASE_PROJECT_ID=$REACT_APP_FIREBASE_PROJECT_ID \
          --build-arg REACT_APP_FIREBASE_STORAGE_BUCKET=$REACT_APP_FIREBASE_STORAGE_BUCKET \
          --build-arg REACT_APP_FIREBASE_MESSAGING_SENDER_ID=$REACT_APP_FIREBASE_MESSAGING_SENDER_ID \
          --build-arg REACT_APP_FIREBASE_APP_ID=$REACT_APP_FIREBASE_APP_ID \
          --build-arg REACT_APP_FIREBASE_MEASUREMENT_ID=$REACT_APP_FIREBASE_MEASUREMENT_ID \

      - name: "🏷️ Tag local Docker image build"
        if: steps.docker-cache.outputs.cache-hit != 'true'
        run: docker tag ${{ env.working-directory }} localhost:5000/${{ env.working-directory }} && docker push localhost:5000/${{ env.working-directory }} || true

  build_docker_server:
    name: "🐳 🏗️ Build Docker (SERVER) Image"
    runs-on: ubuntu-latest
    env:
     working-directory: server

    steps:
      - name: "☁️ Check out Git Repository"
        uses: actions/checkout@v2

      - name: "🔧 Set up Node"
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: "⚡ Cache dependencies"
        uses: actions/cache@v3
        id: modules-cache
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

      - name: "📦 Install dependencies"
        # if: steps.modules-cache.outputs.cache-hit != 'true'
        run: npm install

      - name: "🔧 Create .env file"
        run: |
          rm -f .env
          cp .env.sample .env
          export $(grep -v '^#' .env | xargs)

      - name: "⚡ Cache Docker [server] layers"
        id: docker-cache-a
        uses: actions/cache@v2
        with:
          path: /tmp/docker-registry-${{ env.working-directory }}
          key: ${{ env.working-directory }}-${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            docker-registry-no-buildkit-${{ env.working-directory }}-${{ github.sha }}

      - name: "🧪 Run local Docker registry"
        run: docker run -d -p 5000:5000 --restart=always --name registry -v /tmp/docker-registry:/var/lib/registry registry:2 && npx wait-on tcp:5000

      - name: "🏗 Build Docker image"
        working-directory: ${{ env.working-directory }}
        if: steps.docker-cache.outputs.cache-hit != 'true'
        run: docker build . -t ${{ env.working-directory }} --cache-from=localhost:5000/${{ env.working-directory }} --build-arg BUILDKIT_INLINE_CACHE=1

      - name: "🏷️ Tag Docker image"
        if: steps.docker-cache.outputs.cache-hit != 'true'
        run: docker tag ${{ env.working-directory }} localhost:5000/${{ env.working-directory }} && docker push localhost:5000/${{ env.working-directory }} || true

  test_docker:
    name: "🐳 Test Docker Image Builds"
    runs-on: ubuntu-latest

    steps:
      - name: "☁️ Check out Git Repository"
        uses: actions/checkout@v2

      - name: "🔧 Set up Node"
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: "⚡ Cache dependencies"
        uses: actions/cache@v3
        id: modules-cache
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

      - name: "📦 Install dependencies"
        # if: steps.modules-cache.outputs.cache-hit != 'true'
        run: npm install

      - name: "🔧 Create .env file"
        run: |
          rm -f .env
          cp .env.sample .env
          export $(grep -v '^#' .env | xargs)

      # - name: "⚡ Cache/Build Docker Client layers"
      #   id: docker-cache-client
      #   uses: actions/cache@v2
      #   with:
      #     path: /tmp/docker-registry-client
      #     key: client-${{ runner.os }}-buildx-${{ github.sha }}
      #     restore-keys: |
      #       docker-registry-no-buildkit-client-${{ github.sha }}

      # - name: "🧪 Run local Docker registry"
      #   run: docker run -d -p 5000:5000 --restart=always --name registry -v /tmp/docker-registry:/var/lib/registry registry:2 && npx wait-on tcp:5000

      # - name: "🏗 Build Docker Client image"
      #   # if: steps.docker-cache-client.outputs.cache-hit != 'true'
      #   working-directory: ./client
      #   # run: docker build . -t client --cache-from=localhost:5000/client --build-arg BUILDKIT_INLINE_CACHE=1
      #   run: docker build . -t client

      # - name: "🏷️ Tag Docker Client image"
      #   run: docker tag client localhost:5000/client

      # - name: "📦 Cache/Build Docker Server layers"
      #   id: docker-cache-server
      #   uses: actions/cache@v2
      #   with:
      #     path: /tmp/docker-registry-server
      #     key: server-${{ runner.os }}-buildx-${{ github.sha }}
      #     restore-keys: |
      #       docker-registry-no-buildkit-server-${{ github.sha }}

      # - name: "🏗 Build Docker Server image"
      #   # if: steps.docker-cache-server.outputs.cache-hit != 'true'
      #   working-directory: ./server
      #   run: docker build . -t server --cache-from=localhost:5000/server --build-arg BUILDKIT_INLINE_CACHE=1

      # - name: "🏷️ Tag Docker Server image"
      #   run: docker tag localhost:5000/server && docker push localhost:5000/server || true

      # - name: "🚀 Run Server Docker Container"
      #   run: docker run --env-file ./.env -d -p 5000:5000 docker-server:latest

      # - name: "🚀 Run Client Docker Container"
      #   run: docker run --env-file ./.env -d -p 3000:3000  docker-client/client:latest

      - name: "🏗 Build w/ Docker Compose"
        run: |
          docker-compose build

      - name: "🧱 Start Docker Containers"
        run: |
          docker-compose up -d

      - name: "✅ Run End-to-end tests"
        working-directory: ./__tests__
        run: npm test --if-present
