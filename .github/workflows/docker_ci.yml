name: Docker CI

on:
  workflow_call:

jobs:

  docker-build:
    name: Docker CI
    runs-on: ubuntu-latest
    env:
      working-directory: ./__tests__

    steps:
      - name: "☁️ Check out Git Repository"
        uses: actions/checkout@v2

      - name: "🔧 Set up Node"
        uses: actions/setup-node@v1
        with:
          node-version: 16

      - name: "⚡ Cache [CLIENT] node modules"
        uses: actions/cache@v2
        id: npm_client_cache_id
        with:
          path: ./client/node_modules
          key: client-${{ runner.os }}-npm-cache-${{ hashFiles('./client/package-lock.json') }}
          restore-keys: |
            client-${{ runner.os }}-npm-cache-
            client-${{ runner.os }}-

      - name: "📦 Install [CLIENT] dependencies"
        working-directory: ./client
        if: steps.npm_client_cache_id.outputs.cache-hit != 'true'
        run: npm install

      - name: "⚡ Cache [SERVER] node modules"
        uses: actions/cache@v2
        id: npm_server_cache_id
        with:
          path: ./server/node_modules
          key: server-${{ runner.os }}-npm-cache-${{ hashFiles('./server/package-lock.json') }}
          restore-keys: |
            server-${{ runner.os }}-npm-cache-
            server-${{ runner.os }}-

      - name: "📦 Install [SERVER] dependencies"
        working-directory: ./server
        if: steps.npm_server_cache_id.outputs.cache-hit != 'true'
        run: npm install

      - name: "🏗 Build w/ Docker Compose"
        run: |
          cp .env.sample .env
          cp .env ./client/.env
          docker-compose up --build -d

      - name: "🧪 Running on localhost"
        run: |
          curl http://localhost

      - name: "⚡ Cache (testing) node modules"
        uses: actions/cache@v2
        id: npm_cache_id
        with:
          path: ./__tests__/node_modules
          key: test-${{ runner.os }}-npm-cache-${{ hashFiles('__tests__/package-lock.json') }}
          restore-keys: |
            test-${{ runner.os }}-npm-cache-
            test-${{ runner.os }}-

      - name: "📦 Install testing dependencies"
        working-directory: ./__tests__
        if: steps.npm_cache_id.outputs.cache-hit != 'true'
        run: npm install

      - name: "✅ Run End-to-end tests"
        working-directory: ./__tests__
        run: npm test --if-present

