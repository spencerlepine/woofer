name: Node CI

on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        required: true
        type: string
    secrets:
      CODACY_PROJECT_TOKEN:
        required: true

jobs:

  client_build:
    runs-on: ${{ matrix.os }}
    env:
      working-directory: ./client
    strategy:
      fail-fast: false
      matrix:
        node: ['12', '14', '16']
        os: [ubuntu-latest]

    name: 🏗️ Build Client
    steps:
      - name: "☁️ Check out Git Repository"
        uses: actions/checkout@v2

      - name: "⚙️ Generate .env file"
        run: |
          cp .env.sample .env

      - name: "🔧 Set up Node"
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: "⚡ Cache node modules"
        uses: actions/cache@v3
        id: cache
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: "📦 Install dependencies"
        #if: steps.cache.outputs.cache-hit != 'true'
        run: npm install

      - name: "🏗 Build client"
        working-directory: ${{ env.working-directory }}
        run: npm run build --if-present

  client_test:
    needs: [client_build]
    runs-on: ${{ matrix.os }}
    env:
      working-directory: ./client
    strategy:
      fail-fast: false
      matrix:
        node: ['12', '14', '16']
        os: [ubuntu-latest]

    name: 🧑🏻‍💻 Test Client
    steps:
      - name: "🎯 Print OS and Node version"
        run: echo "Running on ${{ matrix.os }} with Node v${{ matrix.node }}"

      - name: "☁️ Check out Git Repository"
        uses: actions/checkout@v2

      - name: "⚙️ Generate .env file"
        run: |
          cp .env.sample .env

      - name: "🔧 Set up Node"
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: "⚡ Cache node modules"
        uses: actions/cache@v3
        id: cache
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: "📦 Install dependencies"
        #if: steps.cache.outputs.cache-hit != 'true'
        run: npm install

      - name: "✅  Run tests"
        working-directory: ${{ env.working-directory }}
        run: npm run test -- --coverage

      - name: "📁 Upload client test coverage artifact"
        uses: actions/upload-artifact@v3
        with:
          name: client-coverage-file-${{ github.sha }}
          path: ${{ env.working-directory }}/coverage/lcov.info
          retention-days: 3

      # - name: "🌪️ Comment code coverage to PR"
      #   uses: mattallty/jest-github-action@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     # this is just an example, this could be any command that will trigger jest
      #     working-directory: ${{ env.working-directory }}
      #     test-command: "npm run test"

  server_test:
    runs-on: ${{ matrix.os }}
    env:
      working-directory: ./server
      PORT: 5000
      MONGODB_URL: mongodb://127.0.0.1:27017/test
    strategy:
      fail-fast: false
      matrix:
        node: ['12'] #, '14', '16']
        os: [ubuntu-latest]

    name: 🗄️ Test Server
    steps:
      - name: "🎯 Print OS and Node version"
        run: echo "Running on ${{ matrix.os }} with Node v${{ matrix.node }}"

      # - name: "🍃 Create mongoDB Docker container"
      #   run: sudo docker run -d -p 27017:27017 mongo:latest

      - name: "☁️ Check out Git Repository"
        uses: actions/checkout@v2

      - name: "🔧 Set up Node"
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: "⚡ Cache node modules"
        uses: actions/cache@v3
        id: cache
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: "📦 Install dependencies"
        #if: steps.cache.outputs.cache-hit != 'true'
        run: npm install

      - name: "✅  Run tests"
        working-directory: ${{ env.working-directory }}
        run: npm run test -- --coverage

      - name: "📁 Upload server test coverage artifact"
        uses: actions/upload-artifact@v3
        with:
          name: server-coverage-file-${{ github.sha }}
          path: ${{ env.working-directory }}/coverage/lcov.info
          retention-days: 3

      # - name: "🌪️ Comment code coverage to PR"
      #   uses: mattallty/jest-github-action@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     # this is just an example, this could be any command that will trigger jest
      #     working-directory: ${{ env.working-directory }}
      #     test-command: "npm run test"

  end_to_end:
    needs: [client_test, server_test]
    runs-on: ${{ matrix.os }}
    env:
      client-working-directory: ./client
      server-working-directory: ./server
      test-working-directory: ./__tests__
      PORT: 5000
      MONGODB_URL: mongodb://127.0.0.1:27017/test
    strategy:
      fail-fast: false
      matrix:
        node: ['12', '14', '16']
        os: [ubuntu-latest]

    name: ⚡ E2E Testing
    steps:
      - name: "🍃 Create mongoDB Docker container"
        run: sudo docker run -d -p 27017:27017 mongo:latest

      - name: "☁️ Check out Git Repository"
        uses: actions/checkout@v2

      - name: "🔧 Set up Node"
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: "⚡ Cache node modules"
        uses: actions/cache@v3
        id: cache
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: "📦 Install dependencies"
        #if: steps.cache.outputs.cache-hit != 'true'
        run: npm install

      - name: "🔧 Create .env file"
        run: |
          rm -f .env
          cp .env.sample .env
          export $(grep -v '^#' .env | xargs)

      - name: "📦 Start Client"
        working-directory: ${{ env.client-working-directory }}
        run: |
          npm run ci:build
          (npm run dev:client&)

      - name: "📦 Start Server"
        working-directory: ${{ env.server-working-directory }}
        run: |
          (npm run start&)

      - name: "✅  Run tests"
        working-directory: ${{ env.test-working-directory }}
        run: npm run test

  coverage_upload:
    needs: [server_test, client_test]
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}
    name: 📈 Test Coverage Report

    steps:
      - name: "⬇️ Download the client test coverage lcov report"
        uses: actions/download-artifact@v3
        with:
          name: client-coverage-file-${{ github.sha }}

      - name: "📜 Copy the client lcov coverage file"
        run: |
          mv lcov.info client-lcov.info
      - name: "⬇️ Download the server test coverage lcov report"
        uses: actions/download-artifact@v3
        with:
          name: server-coverage-file-${{ github.sha }}

      - name: "📜 Copy the server lcov coverage file"
        run: |
          mv lcov.info server-lcov.info

      - name: "🌪️ Publish to Codacy"
        run: |
          export CODACY_PROJECT_TOKEN=${{ secrets.CODACY_PROJECT_TOKEN }}
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report -l Javascript -r client-lcov.info -r server-lcov.info
