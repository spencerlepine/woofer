name: Node CI

on:
  workflow_call:

jobs:

  client_test:
    runs-on: ${{ matrix.os }}
    env:
      working-directory: ./client
    strategy:
      fail-fast: false
      matrix:
        node: ['12', '14', '16']
        os: [ubuntu-latest]

    name: Client CI
    steps:
      - name: "🎯 Print OS and Node version"
        run: echo "Running on ${{ matrix.os }} with Node v${{ matrix.node }}"

      - name: "☁️ Check out Git Repository"
        uses: actions/checkout@v2

      - name: "⚙️ Generate .env file"
        run: |
          mv .env.sample ${{ env.working-directory }}/.env

      - name: "🔧 Set up Node"
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: "⚡ Cache dependencies"
        uses: actions/cache@v3
        id: modules-cache
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

      - name: "📦 Install dependencies"
        if: steps.modules-cache.outputs.cache-hit != 'true'
        run: npm install

      - name: "✅  Run tests"
        working-directory: ${{ env.working-directory }}
        run: npm run test -- --coverage

      - name: "📁 Upload client test coverage artifact"
        uses: actions/upload-artifact@v3
        with:
          name: client-coverage-file-${{ github.sha }}
          path: ${{ env.working-directory }}/coverage/coverage-final.json
          retention-days: 3

  client_build:
    runs-on: ${{ matrix.os }}
    env:
      working-directory: ./client
    strategy:
      fail-fast: false
      matrix:
        node: ['12', '14', '16']
        os: [ubuntu-latest]

    name: Client Build
    steps:
      - name: "☁️ Check out Git Repository"
        uses: actions/checkout@v2

      - name: "⚙️ Generate .env file"
        run: |
          mv .env.sample ${{ env.working-directory }}/.env

      - name: "🔧 Set up Node"
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
      - name: "⚡ Cache dependencies"
        uses: actions/cache@v3
        id: modules-cache
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

      - name: "📦 Install dependencies"
        if: steps.modules-cache.outputs.cache-hit != 'true'
        run: npm install

      - name: "🏗 Build client"
        working-directory: ${{ env.working-directory }}
        run: npm run build --if-present

  server_test:
    runs-on: ${{ matrix.os }}
    env:
      working-directory: ./server
      PORT: 5000
      MONGODB_URL: mongodb://127.0.0.1:27017/test
    strategy:
      fail-fast: false
      matrix:
        node: ['12', '14', '16']
        os: [ubuntu-latest]

    name: Server CI
    steps:
      - name: "🎯 Print OS and Node version"
        run: echo "Running on ${{ matrix.os }} with Node v${{ matrix.node }}"

      - name: "🍃 Create mongoDB Docker container"
        run: sudo docker run -d -p 27017:27017 mongo:latest

      - name: "☁️ Check out Git Repository"
        uses: actions/checkout@v2

      - name: "🔧 Set up Node"
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: "⚡ Cache dependencies"
        uses: actions/cache@v3
        id: modules-cache
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

      - name: "📦 Install dependencies"
        if: steps.modules-cache.outputs.cache-hit != 'true'
        run: npm install

      - name: "✅  Run tests"
        working-directory: ${{ env.working-directory }}
        run: npm run test -- --coverage

      - name: "📁 Upload server test coverage artifact"
        uses: actions/upload-artifact@v3
        with:
          name: server-coverage-file-${{ github.sha }}
          path: ${{ env.working-directory }}/coverage/coverage-final.json
          retention-days: 3

  coverage_upload:
    needs: [server_test, client_test]
    runs-on: ubuntu-latest
    environment: CI
    name: CodeCov upload

    steps:
      - name: "⬇️ Download the client test coverage report"
        uses: actions/download-artifact@v3
        with:
          name: client-coverage-file-${{ github.sha }}

      - name: "📜 Copy the client coverage file"
        run: |
          mv coverage-final.json coverage-final-client.json

      - name: "⬇️ Download the server test coverage report"
        uses: actions/download-artifact@v3
        with:
          name: server-coverage-file-${{ github.sha }}

      - name: "📜 Copy the server coverage file"
        run: |
          mv coverage-final.json coverage-final-server.json

      - name: "🔀 Merge the coverage reports"
        run: npx istanbul-merge --out coverage-final.json ./coverage-final-server.json ./coverage-final-client.json

      - name: "⬆️ Comment test coverage report"
        uses: AthleticNet/comment-test-coverage@1.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          path: ./coverage-final.json
          title: Woofer Test Coverage

      - name: "🌪️ Publish to CodeCov"
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          flags: unittests
          files: ./coverage-final.json
          name: codecov-umbrella # optional
          fail_ci_if_error: true # optional (default = false)
          # verbose: true # optional (default = false)