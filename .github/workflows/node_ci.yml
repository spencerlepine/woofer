name: Node CI

on:
  workflow_call:

jobs:

  # repo_lint:
  #   name: Lint Code
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false

  #   steps:
  #     - name: "☁️ Check out Git Repository"
  #       uses: actions/checkout@v2

  #     - name: "🔧 Set up Node"
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: 16

  #     - name: "⚡ Cache node modules"
  #       uses: actions/cache@v2
  #       id: npm_cache_id
  #       with:
  #         path: node_modules
  #         key: lint-${{ runner.os }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: |
  #           lint-${{ runner.os }}-npm-cache-
  #           lint-${{ runner.os }}-

  #     - name: "📦 Install linter dependencies"
  #       if: steps.npm_cache_id.outputs.cache-hit != 'true'
  #       run: npm install

  #     - name: "🧽 Lint all files"
  #       run: npm run lint --if-present

  client_ci:
    # needs: [repo_lint]
    runs-on: ${{ matrix.os }}
    env:
      working-directory: ./client
    strategy:
      fail-fast: false
      matrix:
        node: ['12', '14', '16']
        os: [ubuntu-latest]

    name: Client CI
    steps:
      - name: "🎯 Print OS and Node version"
        run: echo "Running on ${{ matrix.os }} with Node v${{ matrix.node }}"

      - name: "☁️ Check out Git Repository"
        uses: actions/checkout@v2

      - name: "⚙️ Generate .env file"
        run: |
          mv .env.sample ${{ env.working-directory }}/.env

      - name: "🔧 Set up Node"
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: "⚡ Cache node modules"
        uses: actions/cache@v2
        id: npm_cache_id
        with:
          path: ${{ env.working-directory }}/node_modules
          key: client-${{ runner.os }}-npm-cache-${{ hashFiles('${{ env.working-directory }}/package-lock.json') }}
          restore-keys: |
            client-${{ runner.os }}-npm-cache-
            client-${{ runner.os }}-

      - name: "📦 Install dependencies"
        working-directory: ${{ env.working-directory }}
        if: steps.npm_cache_id.outputs.cache-hit != 'true'
        run: npm install

      - name: "✅  Run tests"
        working-directory: ${{ env.working-directory }}
        run: npm run test -- --coverage

      - name: "📁 Upload test coverage artifact"
        uses: actions/upload-artifact@v3
        with:
          name: client-coverage
          path: ${{ env.working-directory }}/coverage/coverage-final.json
          retention-days: 3

      - name: "🏗 Build client"
        working-directory: ${{ env.working-directory }}
        run: npm run build --if-present

  server_ci:
    # needs: [repo_lint]
    runs-on: ${{ matrix.os }}
    env:
      working-directory: ./server
      PORT: 5000
      MONGODB_URL: mongodb://127.0.0.1:27017/test
    strategy:
      fail-fast: false
      matrix:
        node: ['12', '14', '16']
        os: [ubuntu-latest]

    name: Server CI
    steps:
      - name: "🎯 Print OS and Node version"
        run: echo "Running on ${{ matrix.os }} with Node v${{ matrix.node }}"

      - name: "🍃 Create mongoDB Docker container"
        run: sudo docker run -d -p 27017:27017 mongo:latest

      - name: "☁️ Check out Git Repository"
        uses: actions/checkout@v2

      - name: "🔧 Set up Node"
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: "⚡ Cache node modules"
        uses: actions/cache@v2
        id: npm_cache_id
        with:
          path: ${{ env.working-directory }}/node_modules
          key: client-${{ runner.os }}-npm-cache-${{ hashFiles('${{ env.working-directory }}/package-lock.json') }}
          restore-keys: |
            server-${{ runner.os }}-npm-cache-
            server-${{ runner.os }}-

      - name: "📦 Install dependencies"
        working-directory: ${{ env.working-directory }}
        if: steps.npm_cache_id.outputs.cache-hit != 'true'
        run: npm install

      - name: "✅  Run tests"
        working-directory: ${{ env.working-directory }}
        run: npm run test -- --coverage

      - name: "📁 Upload test coverage artifact"
        uses: actions/upload-artifact@v3
        with:
          name: server-coverage
          path: ${{ env.working-directory }}/coverage/coverage-final.json
          retention-days: 3

  coverage:
    name: Coverage Upload
    permissions:
      checks: write
      pull-requests: write
    needs: [client_ci, server_ci]
    runs-on: ubuntu-latest

    steps:
      - name: "⬇️ Download the client test coverage report"
        uses: actions/download-artifact@v3
        with:
          name: client-coverage

      - name: "📜 Copy the client coverage file"
        run: |
          echo "$(<coverage-final.json )"
          mv coverage-final.json client-coverage-final.json

      - name: "⬇️ Download the server test coverage report"
        uses: actions/download-artifact@v3
        with:
          name: server-coverage

      - name: "📜 Copy the server coverage file"
        run: |
          echo "$(<coverage-final.json )"
          mv coverage-final.json server-coverage-final.json

      - name: "🔧 Set up Node"
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: "🔀 Merge the coverage reports"
        run: npx istanbul-merge --out coverage-final.json ./client-coverage-final.json ./server-coverage-final.json

      - name: "📜 Display file contents"
        run: echo "$(<coverage-final.json )"

      - name: "📜 Create jest.config.js with threshold"
        run: |
          echo "module.exports = { coverageThreshold: { global: { lines: 60 }  } }" > jest.config.js

      - name: "⬆️ Comment test coverage report"
        uses: ArtiomTr/jest-coverage-report-action@v2
        with:
          coverage-file: ./coverage-final.json

      # - name: "🌪️ Publish to coveralls.io"
      #   uses: coverallsapp/github-action@master
      #   with:
      #     github-token: ${{ secrets.github_token }}
      #     parallel-finished: true
