name: deploy

on:
  workflow_call:
    secrets:
      ENV_PRODUCTION:
        required: true
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_PASSWORD:
        required: true
      DOCKERHUB_CLIENT_REPO:
        required: true
      DOCKERHUB_SERVER_REPO:
        required: true
      EC2_REMOTE_HOST:
        required: true
      EC2_REMOTE_USER:
        required: true
      EC2_SSH_KEY:
        required: true
      EC2_PASSPHRASE:
        required: true

env:
  CACHE_NAME: docker-image-cache

jobs:

  docker_publish:
    name: üê≥ DockerHub Publish
    runs-on: ubuntu-latest

    steps:
      - name: "‚òÅÔ∏è Check out Git Repository"
        uses: actions/checkout@v2

      - name: "üîß Set up Node"
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

      - name: "üì¶ Install dependencies"
        run: npm install

      - name: "üîí Login to DockerHub"
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # - name: "‚ö° Cache Docker Build"
      #   uses: actions/cache@v2
      #   id: docker_cache_id
      #   with:
      #     path: docker-cache-action
      #     key: docker-${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ github.sha }}
      #     restore-keys: |
      #       docker-${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ github.sha }}

      - name: üîß Create .env file
        run: |
          rm -f .env
          echo ${{ secrets.ENV_PRODUCTION }} > .env
          cp .env ./client/.env

      - name: "üèó Build w/ Docker Compose"
        # if: steps.docker_cache_id.outputs.cache-hit != 'true'
        run: |
          docker-compose build

      - name: "üê≥ DockerHub Publish"
        run: |
          docker-compose push

  deploy_ec2:
    needs: [docker_publish]
    name: üöÄ EC2 Depoyment
    runs-on: ubuntu-latest

    steps:
      - name: "üß™ Test EC2 SSH Connection"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_REMOTE_HOST }}
          username: ${{ secrets.EC2_REMOTE_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          passphrase: ${{ secrets.EC2_PASSPHRASE }}
          port: 22
          script_stop: true
          script: |
            GREEN='\033[0;32m'
            NC='\033[0m' # No Color
            echo -e "$GREEN Connected to the EC2 Instance! $NC"
            exit 0

      - name: "üê≥ Deploy Docker Containers"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_REMOTE_HOST }}
          username: ${{ secrets.EC2_REMOTE_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          passphrase: ${{ secrets.EC2_PASSPHRASE }}
          port: 22
          script_stop: true
          script: |
            RED='\033[0;31'
            BLUE='\033[34m'
            GREEN='\033[0;32m'
            NC='\033[0m' # No Color
            echo -e "$BLUE Starting EC2 deployment script $NC"

            sudo service docker stop

            rm -f .env
            echo "${{ secrets.ENV_PRODUCTION }}" > .env
            # ls -a
            echo -e "$GREEN Created the production .env file $NC"

            docker system prune -a --volumes -f
            echo -e "$RED Removed existing Docker containers $NC"

            sudo service docker start

            echo -e "$BLUE Authenticating Docker $NC"
            docker login -u="${{ secrets.DOCKERHUB_USERNAME }}" -p="${{ secrets.DOCKERHUB_PASSWORD }}"

            docker run --env-file ./.env -d -p 5000:5000 ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_SERVER_REPO }}:latest
            echo -e "$BLUE Started up latest Server image $NC"

            docker run --env-file ./.env -d -p 3000:3000 ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_CLIENT_REPO }}:latest
            echo -e "$BLUE Started up latest Server image $NC"

            sudo iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 3000

            echo -e "$GREEN EC2 deployment complete! $NC"


# - name: "üîß Set up Docker Buildx"
#   uses: docker/setup-buildx-action@v1

# - name: "üê≥ Publish to DockerHub Registry"
#   uses: docker/build-push-action@v2
#   env:
#     DOCKERHUB_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_SERVER_REPO }}
#   with:
#     context: ${{ env.working-directory }}
#     file: Dockerfile
#     builder: ${{ steps.buildx.outputs.name }}
#     push: true
#     tags: ${{ env.DOCKERHUB_REPO }}:latest
#     cache-from: type=registry,ref=${{ env.DOCKERHUB_REPO }}:buildcache
#     cache-to: type=registry,ref=${{ env.DOCKERHUB_REPO }}:buildcache,mode=max