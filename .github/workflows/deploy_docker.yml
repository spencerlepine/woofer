name: üîÅ Redeploy Docker

on:
  workflow_dispatch:

jobs:

  publish_docker_client:
    name: "üê≥ Build/Publish Docker (CLIENT) Image"
    environment: production
    runs-on: ubuntu-latest
    env:
     working-directory: client

    steps:
      - name: "‚òÅÔ∏è Check out Git Repository"
        uses: actions/checkout@v2

      - name: "üîß Set up Node"
        uses: actions/setup-node@v3
        with:
          node-version: 14
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: "‚ö° Cache dependencies"
        uses: actions/cache@v3
        id: modules-cache
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

      - name: "üì¶ Install dependencies"
        # if: steps.modules-cache.outputs.cache-hit != 'true'
        run: npm install --prefer-offline --no-audit --progress=false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache-${{ env.working-directory }}
          key: ${{ env.working-directory }}-${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ env.working-directory }}-${{ runner.os }}-buildx-${{ github.sha }}

      - name: "üîß Create .env file"
        run: |
          rm -f .env
          touch .env
          printf "NODE_ENV=\"${{ secrets.NODE_ENV }}\"
          SERVER_URL=\"${{ secrets.SERVER_URL }}\"
          PORT=\"${{ secrets.PORT }}\"
          MONGODB_URL=\"${{ secrets.MONGODB_URL }}\"
          SKIP_PREFLIGHT_CHECK=\"${{ secrets.SKIP_PREFLIGHT_CHECK }}\"
          REACT_APP_FIREBASE_API_KEY=\"${{ secrets.REACT_APP_FIREBASE_API_KEY }}\"
          REACT_APP_FIREBASE_AUTH_DOMAIN=\"${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN }}\"
          REACT_APP_FIREBASE_PROJECT_ID=\"${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }}\"
          REACT_APP_FIREBASE_STORAGE_BUCKET=\"${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET }}\"
          REACT_APP_FIREBASE_MESSAGING_SENDER_ID=\"${{ secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }}\"
          REACT_APP_FIREBASE_APP_ID=\"${{ secrets.REACT_APP_FIREBASE_APP_ID }}\"
          REACT_APP_FIREBASE_MEASUREMENT_ID=\"${{ secrets.REACT_APP_FIREBASE_MEASUREMENT_ID }}\"" >> .env

          NODE_ENV=${{ secrets.NODE_ENV }}
          SERVER_URL=${{ secrets.SERVER_URL }}
          PORT=${{ secrets.PORT }}
          MONGODB_URL=${{ secrets.MONGODB_URL }}
          SKIP_PREFLIGHT_CHECK=${{ secrets.SKIP_PREFLIGHT_CHECK }}
          REACT_APP_FIREBASE_API_KEY=${{ secrets.REACT_APP_FIREBASE_API_KEY }}
          REACT_APP_FIREBASE_AUTH_DOMAIN=${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN }}
          REACT_APP_FIREBASE_PROJECT_ID=${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }}
          REACT_APP_FIREBASE_STORAGE_BUCKET=${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET }}
          REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }}
          REACT_APP_FIREBASE_APP_ID=${{ secrets.REACT_APP_FIREBASE_APP_ID }}
          REACT_APP_FIREBASE_MEASUREMENT_ID=${{ secrets.REACT_APP_FIREBASE_MEASUREMENT_ID }}

      - name: "üîí Login to DockerHub"
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: "üêã Publish to DockerHub Registry"
        uses: docker/build-push-action@v2
        env:
          DOCKERHUB_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_CLIENT_REPO }}
        with:
          context: ./${{ env.working-directory }}
          file: ./${{ env.working-directory }}/Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.DOCKERHUB_REPO }}:latest
          build-args: |
            NODE_ENV=${{ secrets.NODE_ENV }}
            SERVER_URL=${{ secrets.SERVER_URL }}
            PORT=${{ secrets.PORT }}
            MONGODB_URL=${{ secrets.MONGODB_URL }}
            SKIP_PREFLIGHT_CHECK=${{ secrets.SKIP_PREFLIGHT_CHECK }}
            REACT_APP_FIREBASE_API_KEY=${{ secrets.REACT_APP_FIREBASE_API_KEY }}
            REACT_APP_FIREBASE_AUTH_DOMAIN=${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN }}
            REACT_APP_FIREBASE_PROJECT_ID=${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }}
            REACT_APP_FIREBASE_STORAGE_BUCKET=${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET }}
            REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }}
            REACT_APP_FIREBASE_APP_ID=${{ secrets.REACT_APP_FIREBASE_APP_ID }}
            REACT_APP_FIREBASE_MEASUREMENT_ID=${{ secrets.REACT_APP_FIREBASE_MEASUREMENT_ID }}
          # cache-from: type=local,src=/tmp/.buildx-cache-${{ env.working-directory }}
          # cache-to: type=local,dest=/tmp/.buildx-cache-${{ env.working-directory }}

  publish_docker_server:
    name: "üê≥ Build/Publish Docker (SERVER) Image"
    environment: production
    runs-on: ubuntu-latest
    env:
     working-directory: server

    steps:
      - name: "‚òÅÔ∏è Check out Git Repository"
        uses: actions/checkout@v2

      - name: "üîß Set up Node"
        uses: actions/setup-node@v3
        with:
          node-version: 14
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: "‚ö° Cache dependencies"
        uses: actions/cache@v3
        id: modules-cache
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

      - name: "üì¶ Install dependencies"
        # if: steps.modules-cache.outputs.cache-hit != 'true'
        run: npm install --prefer-offline --no-audit --progress=false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # So now you can use Actions' own caching!
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache-${{ env.working-directory }}
          key: ${{ env.working-directory }}-${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ env.working-directory }}-${{ runner.os }}-buildx-${{ github.sha }}

      - name: "üîß Create .env file"
        run: |
          rm -f .env
          touch .env
          printf "NODE_ENV=\"${{ secrets.NODE_ENV }}\"
          SERVER_URL=\"${{ secrets.SERVER_URL }}\"
          PORT=\"${{ secrets.PORT }}\"
          MONGODB_URL=\"${{ secrets.MONGODB_URL }}\"
          SKIP_PREFLIGHT_CHECK=\"${{ secrets.SKIP_PREFLIGHT_CHECK }}\"
          REACT_APP_FIREBASE_API_KEY=\"${{ secrets.REACT_APP_FIREBASE_API_KEY }}\"
          REACT_APP_FIREBASE_AUTH_DOMAIN=\"${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN }}\"
          REACT_APP_FIREBASE_PROJECT_ID=\"${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }}\"
          REACT_APP_FIREBASE_STORAGE_BUCKET=\"${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET }}\"
          REACT_APP_FIREBASE_MESSAGING_SENDER_ID=\"${{ secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }}\"
          REACT_APP_FIREBASE_APP_ID=\"${{ secrets.REACT_APP_FIREBASE_APP_ID }}\"
          REACT_APP_FIREBASE_MEASUREMENT_ID=\"${{ secrets.REACT_APP_FIREBASE_MEASUREMENT_ID }}\"" >> .env

          NODE_ENV=${{ secrets.NODE_ENV }}
          SERVER_URL=${{ secrets.SERVER_URL }}
          PORT=${{ secrets.PORT }}
          MONGODB_URL=${{ secrets.MONGODB_URL }}
          SKIP_PREFLIGHT_CHECK=${{ secrets.SKIP_PREFLIGHT_CHECK }}
          REACT_APP_FIREBASE_API_KEY=${{ secrets.REACT_APP_FIREBASE_API_KEY }}
          REACT_APP_FIREBASE_AUTH_DOMAIN=${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN }}
          REACT_APP_FIREBASE_PROJECT_ID=${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }}
          REACT_APP_FIREBASE_STORAGE_BUCKET=${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET }}
          REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }}
          REACT_APP_FIREBASE_APP_ID=${{ secrets.REACT_APP_FIREBASE_APP_ID }}
          REACT_APP_FIREBASE_MEASUREMENT_ID=${{ secrets.REACT_APP_FIREBASE_MEASUREMENT_ID }}


          NODE_ENV=${{ secrets.NODE_ENV }}
          SERVER_URL=${{ secrets.SERVER_URL }}
          PORT=${{ secrets.PORT }}
          MONGODB_URL=${{ secrets.MONGODB_URL }}
          SKIP_PREFLIGHT_CHECK=${{ secrets.SKIP_PREFLIGHT_CHECK }}
          REACT_APP_FIREBASE_API_KEY=${{ secrets.REACT_APP_FIREBASE_API_KEY }}
          REACT_APP_FIREBASE_AUTH_DOMAIN=${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN }}
          REACT_APP_FIREBASE_PROJECT_ID=${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }}
          REACT_APP_FIREBASE_STORAGE_BUCKET=${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET }}
          REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }}
          REACT_APP_FIREBASE_APP_ID=${{ secrets.REACT_APP_FIREBASE_APP_ID }}
          REACT_APP_FIREBASE_MEASUREMENT_ID=${{ secrets.REACT_APP_FIREBASE_MEASUREMENT_ID }}

      - name: "üîí Login to DockerHub"
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: "üêã Publish to DockerHub Registry"
        uses: docker/build-push-action@v2
        env:
          DOCKERHUB_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_SERVER_REPO }}
        with:
          context: ./${{ env.working-directory }}
          file: ./${{ env.working-directory }}/Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.DOCKERHUB_REPO }}:latest
          # cache-from: type=local,src=/tmp/.buildx-cache-${{ env.working-directory }}
          # cache-to: type=local,dest=/tmp/.buildx-cache-${{ env.working-directory }}
