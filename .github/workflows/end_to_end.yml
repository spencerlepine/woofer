name: Test Docker

on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        required: true
        type: string
    secrets:
      NODE_ENV:
        required: true
      SERVER_URL:
        required: true
      PORT:
        required: true
      MONGODB_URL:
        required: true
      SKIP_PREFLIGHT_CHECK:
        required: true
      REACT_APP_FIREBASE_API_KEY:
        required: true
      REACT_APP_FIREBASE_AUTH_DOMAIN:
        required: true
      REACT_APP_FIREBASE_PROJECT_ID:
        required: true
      REACT_APP_FIREBASE_STORAGE_BUCKET:
        required: true
      REACT_APP_FIREBASE_MESSAGING_SENDER_ID:
        required: true
      REACT_APP_FIREBASE_APP_ID:
        required: true
      REACT_APP_FIREBASE_MEASUREMENT_ID:
        required: true

jobs:

  test_docker_containers:
    name: "‚úÖ E2E Testing"
    environment: ${{ inputs.ENVIRONMENT }}
    runs-on: ubuntu-latest
    container: ubuntu
    env:
      NODE_ENV: ${{ secrets.NODE_ENV }}
      SERVER_URL: ${{ secrets.SERVER_URL }}
      PORT: ${{ secrets.PORT }}
      MONGODB_URL: mongodb://127.0.0.1:27017/test
      SKIP_PREFLIGHT_CHECK: ${{ secrets.SKIP_PREFLIGHT_CHECK }}
      REACT_APP_FIREBASE_API_KEY: ${{ secrets.REACT_APP_FIREBASE_API_KEY }}
      REACT_APP_FIREBASE_AUTH_DOMAIN: ${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN }}
      REACT_APP_FIREBASE_PROJECT_ID: ${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }}
      REACT_APP_FIREBASE_STORAGE_BUCKET: ${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET }}
      REACT_APP_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }}
      REACT_APP_FIREBASE_APP_ID: ${{ secrets.REACT_APP_FIREBASE_APP_ID }}
      REACT_APP_FIREBASE_MEASUREMENT_ID: ${{ secrets.REACT_APP_FIREBASE_MEASUREMENT_ID }}
    services:
      mongodb:
          image: mongo
          env:
            MONGO_INITDB_ROOT_USERNAME: test
            MONGO_INITDB_ROOT_PASSWORD: password
            MONGO_INITDB_DATABASE: test
          options: >-
            --health-cmd mongo
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5
          ports:
            - 27017:27017

    steps:
      - name: "‚òÅÔ∏è Check out Git Repository"
        uses: actions/checkout@v2

      - name: "üîß Set up Node"
        uses: actions/setup-node@v3
        with:
          node-version: 14
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: "‚ö° Cache dependencies"
        uses: actions/cache@v3
        id: modules-cache
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

      - name: "üì¶ Install dependencies"
        # if: steps.modules-cache.outputs.cache-hit != 'true'
        run: npm install

      - name: "üîß Install docker"
        run: |
          apt-get update && apt-get install --no-install-recommends -y ca-certificates curl gnupg lsb-release sudo
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
          $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          apt-get update && apt-get install --no-install-recommends -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

      - name: "üîß Create .env file"
        run: |
          rm -f .env
          touch .env
          printf "NODE_ENV=\"${{ secrets.NODE_ENV }}\"
          SERVER_URL=\"${{ secrets.SERVER_URL }}\"
          PORT=\"${{ secrets.PORT }}
          MONGODB_URL="mongodb://127.0.0.1:27017/test"
          SKIP_PREFLIGHT_CHECK=\"${{ secrets.SKIP_PREFLIGHT_CHECK }}\"
          REACT_APP_FIREBASE_API_KEY=\"${{ secrets.REACT_APP_FIREBASE_API_KEY }}\"
          REACT_APP_FIREBASE_AUTH_DOMAIN=\"${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN }}\"
          REACT_APP_FIREBASE_PROJECT_ID=\"${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }}\"
          REACT_APP_FIREBASE_STORAGE_BUCKET=\"${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET }}\"
          REACT_APP_FIREBASE_MESSAGING_SENDER_ID=\"${{ secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }}\"
          REACT_APP_FIREBASE_APP_ID=\"${{ secrets.REACT_APP_FIREBASE_APP_ID }}\"
          REACT_APP_FIREBASE_MEASUREMENT_ID=\"${{ secrets.REACT_APP_FIREBASE_MEASUREMENT_ID }}\"" >> .env

          NODE_ENV=${{ secrets.NODE_ENV }}
          SERVER_URL=${{ secrets.SERVER_URL }}
          PORT=${{ secrets.PORT }}
          MONGODB_URL=mongodb://127.0.0.1:27017/test
          SKIP_PREFLIGHT_CHECK=${{ secrets.SKIP_PREFLIGHT_CHECK }}
          REACT_APP_FIREBASE_API_KEY=${{ secrets.REACT_APP_FIREBASE_API_KEY }}
          REACT_APP_FIREBASE_AUTH_DOMAIN=${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN }}
          REACT_APP_FIREBASE_PROJECT_ID=${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }}
          REACT_APP_FIREBASE_STORAGE_BUCKET=${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET }}
          REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }}
          REACT_APP_FIREBASE_APP_ID=${{ secrets.REACT_APP_FIREBASE_APP_ID }}
          REACT_APP_FIREBASE_MEASUREMENT_ID=${{ secrets.REACT_APP_FIREBASE_MEASUREMENT_ID }}

      # - name: "‚ö° Cache/Build Docker Client layers"
      #   id: docker-cache-client
      #   uses: actions/cache@v2
      #   with:
      #     path: /tmp/docker-registry-client
      #     key: client-${{ runner.os }}-buildx-${{ github.sha }}
      #     restore-keys: |
      #       docker-registry-no-buildkit-client-${{ github.sha }}

      # - name: "üß™ Run local Docker registry"
      #   run: docker run -d -p 5000:5000 --restart=always --name registry -v /tmp/docker-registry:/var/lib/registry registry:2 && npx wait-on tcp:5000

      - name: "üèó Build Docker Client image"
        # if: steps.docker-cache-client.outputs.cache-hit != 'true'
        working-directory: ./client
        # run: docker build . -t client --cache-from=localhost:5000/client --build-arg BUILDKIT_INLINE_CACHE=1
        run: |
          docker build . \
            -t client \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --build-arg NODE_ENV=$NODE_ENV \
            --build-arg SERVER_URL=$SERVER_URL \
            --build-arg PORT=$PORT \
            --build-arg MONGODB_URL=$MONGODB_URL \
            --build-arg SKIP_PREFLIGHT_CHECK=$SKIP_PREFLIGHT_CHECK \
            --build-arg REACT_APP_FIREBASE_API_KEY=$REACT_APP_FIREBASE_API_KEY \
            --build-arg REACT_APP_FIREBASE_AUTH_DOMAIN=$REACT_APP_FIREBASE_AUTH_DOMAIN \
            --build-arg REACT_APP_FIREBASE_PROJECT_ID=$REACT_APP_FIREBASE_PROJECT_ID \
            --build-arg REACT_APP_FIREBASE_STORAGE_BUCKET=$REACT_APP_FIREBASE_STORAGE_BUCKET \
            --build-arg REACT_APP_FIREBASE_MESSAGING_SENDER_ID=$REACT_APP_FIREBASE_MESSAGING_SENDER_ID \
            --build-arg REACT_APP_FIREBASE_APP_ID=$REACT_APP_FIREBASE_APP_ID \
            --build-arg REACT_APP_FIREBASE_MEASUREMENT_ID=$REACT_APP_FIREBASE_MEASUREMENT_ID \

      - name: "üè∑Ô∏è Tag Docker Client image"
        run: docker tag client woofer-client

      - name: "üöÄ Run Client Docker Container"
        run: |
          docker run --add-host host.docker.internal:host-gateway -id -p 3000:3000 --env NODE_ENV=$NODE_ENV \
            --env SERVER_URL=$SERVER_URL \
            --env PORT=$PORT \
            --env MONGODB_URL=$MONGODB_URL \
            --env SKIP_PREFLIGHT_CHECK=$SKIP_PREFLIGHT_CHECK \
            --env REACT_APP_FIREBASE_API_KEY=$REACT_APP_FIREBASE_API_KEY \
            --env REACT_APP_FIREBASE_AUTH_DOMAIN=$REACT_APP_FIREBASE_AUTH_DOMAIN \
            --env REACT_APP_FIREBASE_PROJECT_ID=$REACT_APP_FIREBASE_PROJECT_ID \
            --env REACT_APP_FIREBASE_STORAGE_BUCKET=$REACT_APP_FIREBASE_STORAGE_BUCKET \
            --env REACT_APP_FIREBASE_MESSAGING_SENDER_ID=$REACT_APP_FIREBASE_MESSAGING_SENDER_ID \
            --env REACT_APP_FIREBASE_APP_ID=$REACT_APP_FIREBASE_APP_ID \
            --env REACT_APP_FIREBASE_MEASUREMENT_ID=$REACT_APP_FIREBASE_MEASUREMENT_ID \
            woofer-client:latest

      # - name: "üì¶ Cache/Build Docker Server layers"
      #   id: docker-cache-server
      #   uses: actions/cache@v2
      #   with:
      #     path: /tmp/docker-registry-server
      #     key: server-${{ runner.os }}-buildx-${{ github.sha }}
      #     restore-keys: |
      #       docker-registry-no-buildkit-server-${{ github.sha }}

      - name: "üèó Build Docker Server image"
        # if: steps.docker-cache-server.outputs.cache-hit != 'true'
        working-directory: ./server
        run: docker build . -t server --build-arg BUILDKIT_INLINE_CACHE=1

      - name: "üè∑Ô∏è Tag Docker Server image"
        run: docker tag server woofer-server

      - name: "üöÄ Run Server Docker Container"
        run: docker run --env-file ./.env --add-host host.docker.internal:host-gateway -d -p 5000:5000 woofer-server:latest

      # - name: "üèó Build w/ Docker Compose"
      #   run: |
      #     docker-compose build

      # - name: "üß± Start Docker Containers"
      #   run: |
      #     docker-compose --env-file .env up -d

      - name: "üì¶ Install dependencies"
        # if: steps.modules-cache.outputs.cache-hit != 'true'
        working-directory: ./__tests__
        run: npm install

      - name: "‚úÖ Run End-to-end tests"
        working-directory: ./__tests__
        env:
          PUPPETEER_SKIP_DOWNLOAD: true
        run: |
          export PUPPETEER_SKIP_DOWNLOAD='true'
          npm test --if-present
